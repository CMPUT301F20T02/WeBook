Index: app/src/main/java/com/example/webook/BorrowerHomepage.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.webook;\r\n\r\nimport androidx.appcompat.app.AppCompatActivity;\r\n\r\nimport android.content.Intent;\r\nimport android.os.Bundle;\r\nimport android.view.View;\r\nimport android.widget.AdapterView;\r\nimport android.widget.ArrayAdapter;\r\nimport android.widget.Button;\r\nimport android.widget.ListView;\r\nimport android.widget.TextView;\r\n\r\nimport java.util.ArrayList;\r\n/**\r\n * This is an activity shows homepage for usertype = borrower\r\n */\r\npublic class BorrowerHomepage extends AppCompatActivity {\r\n    private ListView bookListView;\r\n    private BookList bookList;\r\n    private static ArrayList<Book> dataList;\r\n    private Borrower borrower;\r\n\r\n    @Override\r\n    protected void onCreate(final Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_borrower_homepage);\r\n        bookListView = findViewById(R.id.borrower_book_list);\r\n\r\n        Intent intent = getIntent();\r\n        borrower = (Borrower) intent.getSerializableExtra(\"user\");\r\n\r\n        final Button searchButton = findViewById(R.id.borrower_search);\r\n        searchButton.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                Intent intent = new Intent(BorrowerHomepage.this, BorrowerSearch.class);\r\n                intent.putExtra(\"borrower\",borrower);\r\n                startActivity(intent);\r\n            }\r\n        });\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/webook/BorrowerHomepage.java	(revision 3747ad137133515dd7648907899654cf95101a9e)
+++ app/src/main/java/com/example/webook/BorrowerHomepage.java	(date 1605831871192)
@@ -11,6 +11,7 @@
 import android.widget.ListView;
 import android.widget.TextView;
 
+import java.sql.SQLOutput;
 import java.util.ArrayList;
 /**
  * This is an activity shows homepage for usertype = borrower
@@ -20,6 +21,20 @@
     private BookList bookList;
     private static ArrayList<Book> dataList;
     private Borrower borrower;
+    private DataBaseManager db;
+    private ArrayList<Book> allBooks;
+    private ArrayList<Book> borrowedBooks;
+    private ArrayList<Book> requestedBooks;
+    private ArrayList<Book> acceptedBooks;
+    private BookList allBookList;
+    private BookList borrowedBookList;
+    private BookList requestedBookList;
+    private BookList acceptedBookList;
+    private TextView all;
+    private TextView borrowed;
+    private TextView requested;
+    private TextView accepted;
+    private String currentView = "all";
 
     @Override
     protected void onCreate(final Bundle savedInstanceState) {
@@ -39,5 +54,88 @@
                 startActivity(intent);
             }
         });
+
+        all = findViewById(R.id.borrower_all);
+        accepted = findViewById(R.id.borrower_accepted);
+        requested = findViewById(R.id.borrower_requested);
+        borrowed = findViewById(R.id.borrower_borrowed);
+
+        allBooks = new ArrayList<>();
+        borrowedBooks = new ArrayList<>();
+        requestedBooks = new ArrayList<>();
+        acceptedBooks = new ArrayList<>();
+        allBookList = new BookList(this, allBooks);
+        borrowedBookList = new BookList(this, borrowedBooks);
+        acceptedBookList = new BookList(this, acceptedBooks);
+        requestedBookList = new BookList(this, requestedBooks);
+
+        bookListView.setAdapter(allBookList);
+        db = new DataBaseManager();
+        db.BorrowerHomepageBookAddSnapShotListener(this, borrower.getUsername());
+
+        bookListView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
+            @Override
+            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
+
+            }
+        });
+
+        all.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                bookListView.setAdapter(allBookList);
+                currentView = "all";
+            }
+        });
+
+        requested.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                bookListView.setAdapter(requestedBookList);
+                currentView = "requested";
+            }
+        });
+
+        accepted.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                bookListView.setAdapter(acceptedBookList);
+                currentView = "accepted";
+            }
+        });
+
+        borrowed.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                bookListView.setAdapter(borrowedBookList);
+                currentView = "borrowed";
+            }
+        });
+    }
+
+    public void setBorrowedBooks(ArrayList<Book> borrowedBooks) {
+        this.borrowedBooks.clear();
+        this.borrowedBooks.addAll(borrowedBooks);
+        this.borrowedBookList.notifyDataSetChanged();
+    }
+
+    public void setRequestedBooks(ArrayList<Book> requestedBooks) {
+        this.requestedBooks.clear();
+        this.requestedBooks.addAll(requestedBooks);
+        this.requestedBookList.notifyDataSetChanged();
+    }
+
+    public void setAcceptedBooks(ArrayList<Book> acceptedBooks) {
+        this.acceptedBooks.clear();
+        this.acceptedBooks.addAll(acceptedBooks);
+        this.acceptedBookList.notifyDataSetChanged();
+    }
+
+    public void updateAllBooks(){
+        this.allBooks.clear();
+        this.allBooks.addAll(this.acceptedBooks);
+        this.allBooks.addAll(this.requestedBooks);
+        this.allBooks.addAll(this.borrowedBooks);
+        allBookList.notifyDataSetChanged();
     }
 }
\ No newline at end of file
Index: app/src/main/java/com/example/webook/OwnerRequestPageActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.webook;\r\n\r\nimport androidx.appcompat.app.AppCompatActivity;\r\n\r\nimport android.content.Intent;\r\nimport android.os.Bundle;\r\nimport android.view.View;\r\nimport android.widget.AdapterView;\r\nimport android.widget.ListView;\r\nimport android.widget.TextView;\r\n\r\nimport com.google.gson.internal.$Gson$Preconditions;\r\n\r\nimport java.lang.ref.PhantomReference;\r\nimport java.util.ArrayList;\r\n\r\npublic class OwnerRequestPageActivity extends AppCompatActivity implements OwnerAcceptDeclineFragment.OnFragmentInteractionListener {\r\n    private Owner owner;\r\n    private RequestList requestListPending;\r\n    private RequestList requestListAccepted;\r\n    private RequestList requestListBorrowed;\r\n    private ArrayList<BookRequest> requestArrayList;\r\n    private ArrayList<BookRequest> pendingRequests;\r\n    private ArrayList<BookRequest> acceptedRequests;\r\n    private ArrayList<BookRequest> borrowedRequests;\r\n    private DataBaseManager dataBaseManager;\r\n    private String currentView = \"pending\";\r\n\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_owner_request_page);\r\n\r\n        requestArrayList = new ArrayList<>();\r\n        pendingRequests = new ArrayList<>();\r\n        acceptedRequests = new ArrayList<>();\r\n        borrowedRequests = new ArrayList<>();\r\n\r\n        dataBaseManager = new DataBaseManager();\r\n\r\n        Intent intent = getIntent();\r\n        owner = (Owner) intent.getSerializableExtra(\"user\");\r\n\r\n\r\n\r\n        final ListView requestListView = findViewById(R.id.owner_request_list);\r\n        TextView me = findViewById(R.id.owner_request_me_tab);\r\n        TextView books = findViewById(R.id.owner_request_books_tab);\r\n        TextView pending = findViewById(R.id.owner_request_pending);\r\n        TextView accepted = findViewById(R.id.owner_request_accepted);\r\n        TextView borrowed = findViewById(R.id.owner_request_borrowed);\r\n\r\n        requestListPending = new RequestList(this, pendingRequests, 0);\r\n        requestListAccepted = new RequestList(this, acceptedRequests, 1);\r\n        requestListBorrowed = new RequestList(this, borrowedRequests, 1);\r\n        dataBaseManager.OwnerRequestPageRequestSnapShotListener(this, owner.getUsername());\r\n\r\n        requestListView.setAdapter(requestListPending);\r\n        requestListView.setOnItemClickListener(new AdapterView.OnItemClickListener() {\r\n            @Override\r\n            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {\r\n                BookRequest selectRequest = null;\r\n                if (currentView.equals(\"pending\")) {\r\n                    selectRequest = pendingRequests.get(position);\r\n                    Book selectBook = selectRequest.getBook();\r\n                    Intent intent = new Intent(OwnerRequestPageActivity.this, SameBookRequestList.class);\r\n                    intent.putExtra(\"selectBook\", selectBook);\r\n                    startActivity(intent);\r\n                }else if (currentView.equals(\"accepted\")){\r\n                    selectRequest = acceptedRequests.get(position);\r\n                    String isbn_text = selectRequest.getBook().getISBN();\r\n                    String book_title = selectRequest.getBook().getTitle();\r\n                    String owner_name = selectRequest.getRequestee();\r\n                    String borrower_name = selectRequest.getRequester().get(0);\r\n\r\n                    Intent intent = new Intent(OwnerRequestPageActivity.this, RequestProfile.class);\r\n                    intent.putExtra(\"isbn\", isbn_text);\r\n                    intent.putExtra(\"book_title\", book_title);\r\n                    intent.putExtra(\"owner_name\", owner_name);\r\n                    intent.putExtra(\"borrower_name\", borrower_name);\r\n                    startActivity(intent);\r\n\r\n                }else if(currentView.equals(\"borrowed\")){\r\n                    selectRequest = borrowedRequests.get(position);\r\n                }\r\n\r\n            }\r\n        });\r\n\r\n        pending.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                requestListView.setAdapter(requestListPending);\r\n                currentView = \"pending\";\r\n                System.out.println(\"pending 2 size\"+pendingRequests.size());\r\n            }\r\n        });\r\n\r\n        accepted.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                requestListView.setAdapter(requestListAccepted);\r\n                currentView = \"accepted\";\r\n            }\r\n        });\r\n\r\n        borrowed.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                requestListView.setAdapter(requestListBorrowed);\r\n                currentView = \"borrowed\";\r\n            }\r\n        });\r\n\r\n        books.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                finish();\r\n            }\r\n        });\r\n\r\n        me.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                Intent intent = new Intent(OwnerRequestPageActivity.this, OwnerProfileActivity.class);\r\n                intent.putExtra(\"user\", owner);\r\n                startActivity(intent);\r\n            }\r\n        });\r\n    }\r\n\r\n    public void setArrayList(ArrayList<BookRequest> bookRequests){\r\n        this.requestArrayList = bookRequests;\r\n        System.out.println(\"whole size\" + requestArrayList.size());\r\n        getPending();\r\n        getBorrowed();\r\n        getAccepted();\r\n    }\r\n\r\n    public ArrayList<String> getOwnerRequestList(){\r\n        return owner.getRequestList();\r\n    }\r\n\r\n    public void ownerAddRequest(String isbn){\r\n        owner.addRequest(isbn);\r\n    }\r\n\r\n\r\n\r\n    public void getPending(){\r\n        this.pendingRequests.clear();\r\n        for (int i = 0; i < this.requestArrayList.size(); i++){\r\n            if (requestArrayList.get(i).getStatus().equals(\"pending\")){\r\n                pendingRequests.add(requestArrayList.get(i));\r\n\r\n            }\r\n        }\r\n        System.out.println(\"pending size\" + pendingRequests.size());\r\n        requestListPending.notifyDataSetChanged();\r\n\r\n    }\r\n\r\n    public void getAccepted(){\r\n        this.acceptedRequests.clear();\r\n        for (int i = 0; i < this.requestArrayList.size(); i++){\r\n            if (requestArrayList.get(i).getStatus().equals(\"accepted\")){\r\n                acceptedRequests.add(requestArrayList.get(i));\r\n\r\n            }\r\n        }\r\n        requestListAccepted.notifyDataSetChanged();\r\n\r\n    }\r\n\r\n    public void getBorrowed(){\r\n        this.borrowedRequests.clear();\r\n        for (int i = 0; i < this.requestArrayList.size(); i++){\r\n            if (requestArrayList.get(i).getStatus().equals(\"borrowed\")){\r\n                borrowedRequests.add(requestArrayList.get(i));\r\n\r\n            }\r\n        }\r\n        requestListBorrowed.notifyDataSetChanged();\r\n\r\n    }\r\n\r\n\r\n    public void clearList(){\r\n        this.requestArrayList = new ArrayList<BookRequest>();\r\n        this.owner.setBookList(new ArrayList<String>());\r\n    }\r\n\r\n    @Override\r\n    public void onAcceptPressed() {\r\n\r\n    }\r\n\r\n    @Override\r\n    public void onDeclinePressed() {\r\n\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/webook/OwnerRequestPageActivity.java	(revision 3747ad137133515dd7648907899654cf95101a9e)
+++ app/src/main/java/com/example/webook/OwnerRequestPageActivity.java	(date 1605829734786)
@@ -45,8 +45,8 @@
 
 
         final ListView requestListView = findViewById(R.id.owner_request_list);
-        TextView me = findViewById(R.id.owner_request_me_tab);
-        TextView books = findViewById(R.id.owner_request_books_tab);
+        TextView me = findViewById(R.id.owner_me_tab);
+        TextView books = findViewById(R.id.owner_books_tab);
         TextView pending = findViewById(R.id.owner_request_pending);
         TextView accepted = findViewById(R.id.owner_request_accepted);
         TextView borrowed = findViewById(R.id.owner_request_borrowed);
Index: app/src/main/java/com/example/webook/RequestList.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.webook;\r\n\r\nimport android.content.Context;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.ArrayAdapter;\r\nimport android.widget.ImageView;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.Nullable;\r\n\r\nimport java.util.ArrayList;\r\n/**\r\n * This is a class that keeps track of a list of BookRequests objects\r\n */\r\npublic class RequestList extends ArrayAdapter<BookRequest> {\r\n    private ArrayList<BookRequest> BookRequests;\r\n    private Context context;\r\n    private int mode;\r\n\r\n    public RequestList(Context context, ArrayList<BookRequest> BookRequests, int mode) {\r\n        super(context, 0, BookRequests);\r\n        this.BookRequests = BookRequests;\r\n        this.context = context;\r\n        this.mode = mode;\r\n    }\r\n\r\n    @NonNull\r\n    @Override\r\n    public View getView(int position, @Nullable View convertView, @NonNull ViewGroup parent) {\r\n        View view = convertView;\r\n\r\n\r\n        if (view == null) {\r\n            view = LayoutInflater.from(context).inflate(R.layout.request_list_content, parent, false);\r\n        }\r\n\r\n        BookRequest BookRequest = BookRequests.get(position);\r\n\r\n        ImageView img= (ImageView) view.findViewById(R.id.request_book_icon);\r\n        img.setImageResource(R.drawable.book_icon);\r\n\r\n        TextView title_text = view.findViewById(R.id.request_book_title);\r\n        title_text.setText(BookRequest.getBook().getTitle());\r\n        TextView borrow_text = view.findViewById(R.id.request_requesterORrequestee);\r\n        if (this.mode == 1){\r\n            borrow_text.setText(\"Requested by \" + BookRequest.getRequester().get(position));\r\n        }\r\n\r\n        return view;\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/webook/RequestList.java	(revision 3747ad137133515dd7648907899654cf95101a9e)
+++ app/src/main/java/com/example/webook/RequestList.java	(date 1605835150004)
@@ -46,7 +46,8 @@
         title_text.setText(BookRequest.getBook().getTitle());
         TextView borrow_text = view.findViewById(R.id.request_requesterORrequestee);
         if (this.mode == 1){
-            borrow_text.setText("Requested by " + BookRequest.getRequester().get(position));
+            System.out.println("dwadawd  " + BookRequest.getBook().getISBN());
+            //borrow_text.setText("Requested by " + BookRequest.getRequester().get(position));
         }
 
         return view;
Index: app/src/main/java/com/example/webook/DataBaseManager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.webook;\r\n\r\nimport android.content.Intent;\r\nimport android.graphics.Bitmap;\r\nimport android.graphics.drawable.BitmapDrawable;\r\nimport android.net.Uri;\r\nimport android.util.Log;\r\nimport android.widget.Toast;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.Nullable;\r\n\r\nimport com.bumptech.glide.Glide;\r\nimport com.google.android.gms.tasks.Continuation;\r\nimport com.google.android.gms.tasks.OnCompleteListener;\r\nimport com.google.android.gms.tasks.OnFailureListener;\r\nimport com.google.android.gms.tasks.OnSuccessListener;\r\nimport com.google.android.gms.tasks.Task;\r\nimport com.google.android.gms.tasks.Tasks;\r\nimport com.google.firebase.firestore.CollectionReference;\r\nimport com.google.firebase.firestore.DocumentReference;\r\nimport com.google.firebase.firestore.DocumentSnapshot;\r\nimport com.google.firebase.firestore.EventListener;\r\nimport com.google.firebase.firestore.FieldValue;\r\nimport com.google.firebase.firestore.FirebaseFirestore;\r\nimport com.google.firebase.firestore.FirebaseFirestoreException;\r\nimport com.google.firebase.firestore.MetadataChanges;\r\nimport com.google.firebase.firestore.QueryDocumentSnapshot;\r\nimport com.google.firebase.firestore.QuerySnapshot;\r\nimport com.google.firebase.storage.FirebaseStorage;\r\nimport com.google.firebase.storage.StorageReference;\r\nimport com.google.firebase.storage.UploadTask;\r\n\r\nimport java.io.ByteArrayOutputStream;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.concurrent.ExecutionException;\r\nimport java.util.concurrent.TimeUnit;\r\n\r\n/**\r\n * This is the class keeps functions handle database operation\r\n * Or handling information get from database\r\n */\r\npublic class DataBaseManager {\r\n    FirebaseFirestore db;\r\n    StorageReference storageReference;\r\n    CollectionReference collectionReference;\r\n    String TAG;\r\n\r\n\r\n    public DataBaseManager(){\r\n        db = FirebaseFirestore.getInstance();\r\n        storageReference = FirebaseStorage.getInstance().getReference();\r\n    }\r\n\r\n\r\n    /**\r\n     * This check for username and password consistency in database\r\n     * If consist and login success, jump to homepage for users with different usertype\r\n     * @param username\r\n     * @param pwd\r\n     * These are username and password you want to check\r\n     */\r\n    public void authenticate(final String username, final String pwd, final MainActivity mainActivity){\r\n        final DocumentReference userRef = db.collection(\"users\").document(username);\r\n        userRef.get().addOnCompleteListener( new OnCompleteListener<DocumentSnapshot>() {\r\n            @Override\r\n            public void onComplete(@NonNull Task<DocumentSnapshot> task) {\r\n                if (task.isSuccessful()) {\r\n                    DocumentSnapshot document = task.getResult();\r\n                    int duration = Toast.LENGTH_SHORT;\r\n                    if (document.exists() && document.getString(\"pwd\").equals(pwd)) {\r\n                        Intent intent;\r\n                        if (document.getString(\"userType\").equals(\"owner\")){\r\n                            intent = new Intent(mainActivity, OwnerHomepage.class);\r\n                            Owner owner = new Owner(username, document.getString(\"email\"),\r\n                                    document.getString(\"phoneNumber\"), document.getString(\"pwd\"), document.getString(\"description\"), document.getString(\"user_image\"));\r\n                            owner.setBookList((ArrayList<String>) document.get(\"bookList\"));\r\n                            intent.putExtra(\"user\", owner);\r\n                            mainActivity.startActivity(intent);\r\n                        }else if (document.getString(\"userType\").equals(\"borrower\")) {\r\n                            intent = new Intent(mainActivity, BorrowerHomepage.class);\r\n                            Borrower borrower = new Borrower(username, document.getString(\"email\"),\r\n                                    document.getString(\"phoneNumber\"), document.getString(\"pwd\"), document.getString(\"description\"), document.getString(\"user_image\"));\r\n                            intent.putExtra(\"user\", borrower);\r\n                            mainActivity.startActivity(intent);\r\n                        }\r\n                    } else {\r\n                    }\r\n                } else {\r\n                    Log.d(TAG, \"Failed with: \", task.getException());\r\n                }\r\n            }\r\n        } );\r\n    }\r\n\t\r\n\r\n    /**\r\n     * This search books by keyword in multiple fields in database\r\n     * @param message\r\n     * @param borrowerSearchBookPage\r\n     * These are the keyword you want to search and the page you want to show the data\r\n     */\r\n    public void BorrowerSearchBook(final String message, final BorrowerSearchBookPage borrowerSearchBookPage){\r\n        collectionReference= db.collection(\"books\");\r\n        collectionReference\r\n                .get()\r\n                .addOnCompleteListener(new OnCompleteListener<QuerySnapshot>() {\r\n                    @Override\r\n                    public void onComplete(@NonNull Task<QuerySnapshot> task) {\r\n                        if (task.isSuccessful()) {\r\n                            borrowerSearchBookPage.dataList.clear();\r\n                            for (QueryDocumentSnapshot document : task.getResult()) {\r\n                                Log.d(TAG, document.getId());\r\n                                String status = (String) document.getData().get(\"status\");\r\n                                if(!status.equals(\"borrowed\") && !status.equals(\"accepted\")){\r\n                                    String title = (String) document.getData().get(\"title\");\r\n                                    String author = (String) document.getData().get(\"author\");\r\n                                    String isbn = (String) document.getData().get(\"isbn\");\r\n                                    String description = (String) document.getData().get(\"description\");\r\n                                    String owner = (String) document.getData().get(\"owner\");\r\n\r\n                                    if(title.contains(message)) {\r\n                                        borrowerSearchBookPage.dataList.add(new Book(title, isbn, author, status, owner, null, description));\r\n                                    }\r\n                                    else if (author.contains(message)) {\r\n                                        borrowerSearchBookPage.dataList.add(new Book(title, isbn, author, status, owner, null, description));\r\n                                    }\r\n                                    else if(isbn.contains(message)) {\r\n                                        borrowerSearchBookPage.dataList.add(new Book(title, isbn, author, status, owner, null, description));\r\n                                    }else if(description!= null){\r\n                                        if(description.contains(message)) {\r\n                                            borrowerSearchBookPage.dataList.add(new Book(title, isbn, author, status, owner, null, description));\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                            borrowerSearchBookPage.bookAdapter.notifyDataSetChanged();\r\n                        } else {\r\n                            Log.d(TAG, \"Error getting documents: \", task.getException());\r\n                        }\r\n                    }\r\n                });\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * This search user by username in database\r\n     * @param message\r\n     * @param borrowerSearchUserPage\r\n     * These are the username you want to search and the page you want to show the data\r\n     */\r\n    public void BorrowerSearchUser(final String message, final BorrowerSearchUserPage borrowerSearchUserPage){\r\n        collectionReference= db.collection(\"users\");\r\n        collectionReference.get()\r\n                .addOnCompleteListener(new OnCompleteListener<QuerySnapshot>() {\r\n                    @Override\r\n                    public void onComplete(@NonNull Task<QuerySnapshot> task) {\r\n                        if (task.isSuccessful()) {\r\n                            borrowerSearchUserPage.dataList.clear();\r\n                            for (QueryDocumentSnapshot document : task.getResult()) {\r\n                                Log.d(TAG, document.getId());\r\n                                String Username = document.getId();\r\n                                String email = (String) document.getData().get(\"email\");\r\n                                String description =  (String) document.getData().get(\"description\");\r\n                                String pwd =  (String) document.getData().get(\"pwd\");\r\n                                String phoneNumber =  (String) document.getData().get(\"phoneNumber\");\r\n                                String userType = (String) document.getData().get(\"userType\");\r\n                                if(Username.contains(message)){\r\n                                    if(userType.equals(\"borrower\")) {\r\n                                        borrowerSearchUserPage.dataList.add(new Borrower(Username,email, phoneNumber, pwd, description,null));\r\n                                    }else{\r\n                                        borrowerSearchUserPage.dataList.add(new Owner(Username,email, phoneNumber, pwd, description,null));\r\n                                    }\r\n                                }\r\n                            }\r\n                            borrowerSearchUserPage.userAdapter.notifyDataSetChanged();\r\n                        } else {\r\n                            Log.d(TAG, \"Error getting documents: \", task.getException());\r\n                        }\r\n                    }\r\n                });\r\n    }\r\n\r\n\r\n    /**\r\n     * This add a book document in database\r\n     * @param bitmap\r\n     * @param book\r\n     * @param owner\r\n     * These are the picture, book item and owner information that you want to add into the document\r\n     */\r\n    public void addBook(Bitmap bitmap, final Book book, final Owner owner){\r\n        if (bitmap != null) {\r\n            final StorageReference imageReference = storageReference.child( \"images/\" + System.currentTimeMillis());\r\n            ByteArrayOutputStream stream = new ByteArrayOutputStream();\r\n            bitmap.compress(Bitmap.CompressFormat.PNG, 100, stream);\r\n            byte[] byteArray = stream.toByteArray();\r\n\r\n            imageReference.putBytes(byteArray)\r\n                    .addOnSuccessListener(new OnSuccessListener<UploadTask.TaskSnapshot>() {\r\n                        @Override\r\n                        public void onSuccess(UploadTask.TaskSnapshot taskSnapshot) {\r\n                            imageReference.getDownloadUrl().addOnSuccessListener(new OnSuccessListener<Uri>() {\r\n                                @Override\r\n                                public void onSuccess(Uri uri) {\r\n                                    String url = uri.toString();\r\n                                    book.setImage(url);\r\n                                    uploadBook(book,owner);\r\n                                }\r\n                            });\r\n                        }\r\n                    })\r\n                    .addOnFailureListener(new OnFailureListener() {\r\n                        @Override\r\n                        public void onFailure(@NonNull Exception e) {\r\n                            Log.w(\"Upload image\", \"Error uploading.\", e);\r\n                        }\r\n                    });\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * This change a book document in database\r\n     * @param book\r\n     * @param owner\r\n     * These are book and its owner that the document you want to change have\r\n     */\r\n    private void uploadBook(final Book book, final Owner owner){\r\n        db.collection(\"books\").document(book.getISBN())\r\n                .set(book)\r\n                .addOnSuccessListener(new OnSuccessListener<Void>() {\r\n                    @Override\r\n                    public void onSuccess(Void aVoid) {\r\n                        updateOwnerBookList(owner, book);\r\n                    }\r\n                })\r\n                .addOnFailureListener(new OnFailureListener() {\r\n                    @Override\r\n                    public void onFailure(@NonNull Exception e) {\r\n                        Log.w(\"Add book\", \"Error adding book\", e);\r\n                    }\r\n                });\r\n    }\r\n\r\n\r\n    /**\r\n     * This change the bookList filed in a user document in database\r\n     * @param owner\r\n     * @param book\r\n     * These are user and the book item you want to add into booklist\r\n     */\r\n    private void updateOwnerBookList(Owner owner, final Book book){\r\n        db.collection(\"users\").document(owner.getUsername())\r\n                .update(\"bookList\", FieldValue.arrayUnion(book.getISBN()))\r\n                .addOnSuccessListener(new OnSuccessListener<Void>() {\r\n                    @Override\r\n                    public void onSuccess(Void aVoid) {\r\n                    }\r\n                })\r\n                .addOnFailureListener(new OnFailureListener() {\r\n                    @Override\r\n                    public void onFailure(@NonNull Exception e) {\r\n                        Log.w(\"updateUserBookList\", \"Error updating\", e);\r\n                    }\r\n                });\r\n    }\r\n\r\n\r\n    /**\r\n     * This send a bookRequest into database\r\n     * @param newRequest\r\n     * @param borrower\r\n     * These are request infomation and the user who send this request\r\n     */\r\n    public void sendBookRequest(final Request newRequest, Borrower borrower){\r\n        collectionReference = db.collection(\"requests\");\r\n        TAG = \"\";\r\n        collectionReference\r\n                .document(newRequest.getBook().getISBN())\r\n                .update(\"requester\", FieldValue.arrayUnion(borrower.getUsername()))\r\n                .addOnSuccessListener(new OnSuccessListener<Void>() {\r\n                    @Override\r\n                    public void onSuccess(Void aVoid) {\r\n                        Log.d(TAG, \"Data has been added successfully!\");\r\n                    }\r\n                })\r\n                .addOnFailureListener(new OnFailureListener() {\r\n                    @Override\r\n                    public void onFailure(@NonNull Exception e) {\r\n                        collectionReference.document(newRequest.getBook().getISBN()).set(newRequest);\r\n                        Log.d(TAG, \"Data addition failed\" + e.toString());\r\n                        db.collection(\"requests\").document(newRequest.getBook().getISBN())\r\n                                .set(newRequest);\r\n                        db.collection(\"books\").document(newRequest.getBook().getISBN())\r\n                                .update(\r\n                                        \"status\", \"requested\"\r\n                                );\r\n                    }\r\n                });\r\n    }\r\n\r\n\r\n    /**\r\n     * This upload a user document in database\r\n     * @param username\r\n     * @param phoneText\r\n     * @param emailText\r\n     * @param descriptionText\r\n     * These are new field values you want your document to have\r\n     */\r\n    public void updateInfo(String username, String phoneText, String emailText, String descriptionText){\r\n        DocumentReference userRef = db.collection(\"users\").document(username);\r\n        userRef.update(\"phoneNumber\", phoneText);\r\n        userRef.update(\"email\", emailText);\r\n        userRef.update(\"description\", descriptionText);\r\n    }\r\n\r\n\r\n    /**\r\n     * This search for requests in the database which request for a book and show the list\r\n     * @param isbn\r\n     * @param sameBookRequest\r\n     * These are the isbn code the requested book had and the page you want to show the list\r\n     */\r\n    public void getSameBookRequest(String isbn, final SameBookRequestList sameBookRequest){\r\n        DocumentReference docRef = db.collection(\"requests\").document(isbn);\r\n        docRef.get().addOnSuccessListener(new OnSuccessListener<DocumentSnapshot>() {\r\n            @Override\r\n            public void onSuccess(DocumentSnapshot documentSnapshot) {\r\n                BookRequest request = documentSnapshot.toObject(BookRequest.class);\r\n                sameBookRequest.dataListClear();\r\n                for(int i = 0; i < request.getRequester().size(); i++){\r\n                    sameBookRequest.dataListAdd(request);\r\n                }\r\n                sameBookRequest.bookAdapterChanged();\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    /**\r\n     * This show the updated request list for a book in the database\r\n     * @param isbn\r\n     * @param sameBookRequest\r\n     * These are the isbn code the requested book had and the page you want to show the list\r\n     */\r\n    public  void declinePressed(String isbn, final SameBookRequestList sameBookRequest){\r\n        DocumentReference docRef = db.collection(\"requests\").document(isbn);\r\n        docRef.get().addOnSuccessListener(new OnSuccessListener<DocumentSnapshot>() {\r\n            @Override\r\n            public void onSuccess(DocumentSnapshot documentSnapshot) {\r\n                BookRequest request = documentSnapshot.toObject(BookRequest.class);\r\n                sameBookRequest.dataListClear();\r\n                for(int i = 0; i < request.getRequester().size(); i++){\r\n                    sameBookRequest.dataListAdd(request);\r\n                }\r\n                sameBookRequest.bookAdapterChanged();\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    /**\r\n     * This check if document with same name exist in database\r\n     * If not, it add a document into user with usertype owner in database\r\n     * @param usernameText\r\n     * @param emailText\r\n     * @param phoneText\r\n     * @param pwdText\r\n     * @param descriptionText\r\n     * @param signUpActivity\r\n     * These are the user information your document will have\r\n     */\r\n    public void ownerSignUp(final String usernameText, final String emailText,\r\n                            final String phoneText, final String pwdText, final String descriptionText, final SignUpActivity signUpActivity){\r\n        final DocumentReference userRef = db.collection(\"users\").document(usernameText);\r\n        userRef.get().addOnCompleteListener(new OnCompleteListener<DocumentSnapshot>() {\r\n            @Override\r\n            public void onComplete(@NonNull Task<DocumentSnapshot> task) {\r\n                if (task.isSuccessful()){\r\n                    DocumentSnapshot document = task.getResult();\r\n                    if (document.exists()){\r\n                        Toast toast = Toast.makeText(signUpActivity, \"Username already in use!\", Toast.LENGTH_SHORT);\r\n                        toast.show();\r\n                    }else{\r\n                        userRef.set(new Owner(usernameText, emailText, phoneText, pwdText, descriptionText, null));\r\n                        Toast toast = Toast.makeText(signUpActivity, \"Sign up successful!\", Toast.LENGTH_SHORT);\r\n                        toast.show();\r\n                        signUpActivity.finish();\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n\t\r\n\t\r\n    /**\r\n     * This check if document with same name exist in database\r\n     * If not, it add a document into user with usertype borrower in database\r\n     * @param usernameText\r\n     * @param emailText\r\n     * @param phoneText\r\n     * @param pwdText\r\n     * @param descriptionText\r\n     * @param signUpActivity\r\n     * These are the user information your document will have\r\n     */\r\n    public void borrowerSignUp(final String usernameText, final String emailText,\r\n                            final String phoneText, final String pwdText, final String descriptionText, final SignUpActivity signUpActivity){\r\n        final DocumentReference userRef = db.collection(\"users\").document(usernameText);\r\n        userRef.get().addOnCompleteListener(new OnCompleteListener<DocumentSnapshot>() {\r\n            @Override\r\n            public void onComplete(@NonNull Task<DocumentSnapshot> task) {\r\n                if (task.isSuccessful()){\r\n                    DocumentSnapshot document = task.getResult();\r\n                    if (document.exists()){\r\n                        Toast toast = Toast.makeText(signUpActivity, \"Username already in use!\", Toast.LENGTH_SHORT);\r\n                        toast.show();\r\n                    }else{\r\n                        userRef.set(new Borrower(usernameText, emailText, phoneText, pwdText, descriptionText, null));\r\n                        Toast toast = Toast.makeText(signUpActivity, \"Sign up successful!\", Toast.LENGTH_SHORT);\r\n                        toast.show();\r\n                        signUpActivity.finish();\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    public void OwnerRequestPageRequestSnapShotListener(final OwnerRequestPageActivity ownerRequestPageActivity, final String username){\r\n        CollectionReference requestRef = db.collection(\"requests\");\r\n        requestRef\r\n                .whereEqualTo(\"requestee\", username)\r\n                .addSnapshotListener(new EventListener<QuerySnapshot>() {\r\n                    @Override\r\n                    public void onEvent(@Nullable QuerySnapshot value, @Nullable FirebaseFirestoreException error) {\r\n                        assert value != null;\r\n                        List<DocumentSnapshot> documents = value.getDocuments();\r\n                        ArrayList<BookRequest> bookRequests = new ArrayList<>();\r\n                        for (int i = 0; i < documents.size(); i++){\r\n                            System.out.println(documents.get(i).toObject(BookRequest.class).getRequestee());\r\n                            BookRequest temp = documents.get(i).toObject(BookRequest.class);\r\n                            bookRequests.add(temp);\r\n                        }\r\n                        ownerRequestPageActivity.setArrayList(bookRequests);\r\n                    }\r\n                });\r\n    }\r\n\r\n    public void OwnerHomePageAddBookSnapShotListener(final OwnerHomepage ownerHomepage, final String username){\r\n\r\n        final CollectionReference bookRef = db.collection(\"books\");\r\n        bookRef.addSnapshotListener(new EventListener<QuerySnapshot>() {\r\n            @Override\r\n            public void onEvent(@Nullable QuerySnapshot value, @Nullable FirebaseFirestoreException error) {\r\n                db.collection(\"users\").document(username).get().addOnCompleteListener(new OnCompleteListener<DocumentSnapshot>() {\r\n                    @Override\r\n                    public void onComplete(@NonNull Task<DocumentSnapshot> task) {\r\n\r\n                        if(task.isSuccessful()){\r\n                            ownerHomepage.setBookArrayList(new ArrayList<Book>());\r\n                            ownerHomepage.ownerSetBookList(new ArrayList<String>());\r\n                            DocumentSnapshot document = task.getResult();\r\n                            final ArrayList<String> bookisbn = (ArrayList<String>) document.get(\"bookList\");\r\n                            downloadBooks(ownerHomepage, bookisbn);\r\n\r\n                        }\r\n\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    private void downloadBooks(final OwnerHomepage ownerHomepage , final ArrayList<String> bookisbn) {\r\n        CollectionReference bookRef = db.collection(\"books\");\r\n        for (int i = 0; i < bookisbn.size(); i++) {\r\n            DocumentReference bookRef1 = bookRef.document(bookisbn.get(i));\r\n            bookRef1.get().addOnCompleteListener(new OnCompleteListener<DocumentSnapshot>() {\r\n                @Override\r\n                public void onComplete(@NonNull Task<DocumentSnapshot> task) {\r\n                    if (task.isSuccessful()) {\r\n                        DocumentSnapshot document = task.getResult();\r\n                        if (document.exists()) {\r\n                            Book book = document.toObject(Book.class);\r\n                            if (!ownerHomepage.getOwnerBookList().contains(book.getISBN())){\r\n                                ownerHomepage.ownerAddBook(book.getISBN());\r\n                                ownerHomepage.addBookArrayList(book);\r\n                                ownerHomepage.setBookList();\r\n                                ownerHomepage.dataChanged();\r\n                                ownerHomepage.getAvailable();\r\n                                ownerHomepage.getAccepted();\r\n                                ownerHomepage.getRequested();\r\n                                ownerHomepage.getBorrowed();\r\n                            }\r\n\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    public void OwnerHomePageAddUserSnapShotListener(final OwnerHomepage ownerHomepage, final String username){\r\n        DocumentReference userRef = db.collection(\"users\").document(username);\r\n        userRef.addSnapshotListener(new EventListener<DocumentSnapshot>() {\r\n            @Override\r\n            public void onEvent(@Nullable DocumentSnapshot value, @Nullable FirebaseFirestoreException error) {\r\n                ownerHomepage.setBookArrayList(new ArrayList<Book>());\r\n                ownerHomepage.ownerSetBookList(new ArrayList<String>());\r\n                ArrayList<String> bookisbn = (ArrayList<String>) value.get(\"bookList\");\r\n                downloadBooks(ownerHomepage, bookisbn);\r\n            }\r\n        });\r\n    }\r\n\r\n    public void BorrowerProfileAddUserSnapShotListener(final BorrowerProfileActivity borrowerProfileActivity, final String username){\r\n        DocumentReference userRef = db.collection(\"users\").document(username);\r\n        userRef.addSnapshotListener(new EventListener<DocumentSnapshot>() {\r\n            @Override\r\n            public void onEvent(@Nullable DocumentSnapshot value, @Nullable FirebaseFirestoreException error) {\r\n                updateBorrowerInfo(value, borrowerProfileActivity);\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    private void updateBorrowerInfo(DocumentSnapshot document, final BorrowerProfileActivity borrowerProfileActivity) {\r\n        Borrower borrower = document.toObject(Borrower.class);\r\n        borrowerProfileActivity.setUsername(borrower.getUsername());\r\n        borrowerProfileActivity.setUserType(borrower.getUserType());\r\n        borrowerProfileActivity.setPhone(borrower.getPhoneNumber());\r\n        borrowerProfileActivity.setEmail(borrower.getEmail());\r\n        borrowerProfileActivity.setDescription(borrower.getDescription());\r\n    }\r\n\r\n    public void OwnerProfileAddUserSnapShotListener(final OwnerProfileActivity ownerProfileActivity, final String username){\r\n        DocumentReference userRef = db.collection(\"users\").document(username);\r\n        userRef.addSnapshotListener(new EventListener<DocumentSnapshot>() {\r\n            @Override\r\n            public void onEvent(@Nullable DocumentSnapshot value, @Nullable FirebaseFirestoreException error) {\r\n                updateOwnerInfo(value, ownerProfileActivity);\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    private void updateOwnerInfo(DocumentSnapshot document, final OwnerProfileActivity ownerProfileActivity) {\r\n        Borrower borrower = document.toObject(Borrower.class);\r\n        ownerProfileActivity.setUsername(borrower.getUsername());\r\n        ownerProfileActivity.setUserType(borrower.getUserType());\r\n        ownerProfileActivity.setPhone(borrower.getPhoneNumber());\r\n        ownerProfileActivity.setEmail(borrower.getEmail());\r\n        ownerProfileActivity.setDescription(borrower.getDescription());\r\n    }\r\n\r\n    public void removeBook(Book book){\r\n        DocumentReference docRef = db.collection(\"books\").document(book.getISBN());\r\n        docRef.delete()\r\n                .addOnSuccessListener(new OnSuccessListener<Void>() {\r\n                    @Override\r\n                    public void onSuccess(Void aVoid) {\r\n                        Log.d(TAG, \"DocumentSnapshot successfully deleted!\");\r\n                    }\r\n                })\r\n                .addOnFailureListener(new OnFailureListener() {\r\n                    @Override\r\n                    public void onFailure(@NonNull Exception e) {\r\n                        Log.w(TAG, \"Error deleting document\", e);\r\n                    }\r\n                });\r\n    }\r\n\r\n    public void updateBook(final OwnerBookProfile ownerBookProfile, String isbn){\r\n        DocumentReference docRef = db.collection(\"books\").document(isbn);\r\n        System.out.println(isbn);\r\n        docRef.get().addOnCompleteListener(new OnCompleteListener<DocumentSnapshot>() {\r\n            @Override\r\n            public void onComplete(@NonNull Task<DocumentSnapshot> task) {\r\n                if (task.isSuccessful()){\r\n                    DocumentSnapshot document = task.getResult();\r\n                    System.out.println(\"I'm successful!\");\r\n                    Book selectBook = document.toObject(Book.class);\r\n                    System.out.println(\"I'm successful too\" + selectBook.getDescription());\r\n                    if (document.exists()) {\r\n                        System.out.println(\"I'm successful too!\");\r\n                        //Book selectBook = document.toObject(Book.class);\r\n                        ownerBookProfile.setTitle_text(selectBook.getTitle());\r\n                        ownerBookProfile.setAuthor_text(selectBook.getAuthor());\r\n                        ownerBookProfile.setDescription_text(selectBook.getDescription());\r\n                        ownerBookProfile.setIsbn_text(selectBook.getISBN());\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    public void BookProfileAddUserSnapShotListener(final OwnerBookProfile ownerBookProfile, final String isbn){\r\n        DocumentReference bookRef = db.collection(\"books\").document(isbn);\r\n        bookRef.addSnapshotListener(new EventListener<DocumentSnapshot>() {\r\n            @Override\r\n            public void onEvent(@Nullable DocumentSnapshot value, @Nullable FirebaseFirestoreException error) {\r\n                updateBookInfo(value, ownerBookProfile);\r\n            }\r\n        });\r\n    }\r\n\r\n    private void updateBookInfo (DocumentSnapshot documentSnapshot, final OwnerBookProfile ownerBookProfile) {\r\n        Book book = documentSnapshot.toObject(Book.class);\r\n        ownerBookProfile.setTitle_text(book.getTitle());\r\n        ownerBookProfile.setIsbn_text(book.getISBN());\r\n        ownerBookProfile.setDescription_text(book.getDescription());\r\n        ownerBookProfile.setAuthor_text(book.getAuthor());\r\n    }\r\n\r\n    public void updateBook (String isbn, String title, String author, String des) {\r\n        DocumentReference bookRef = db.collection(\"books\").document(isbn);\r\n        bookRef.update(\"description\",des);\r\n        bookRef.update(\"title\",title);\r\n        bookRef.update(\"author\", author);\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/webook/DataBaseManager.java	(revision 3747ad137133515dd7648907899654cf95101a9e)
+++ app/src/main/java/com/example/webook/DataBaseManager.java	(date 1605830302608)
@@ -623,4 +623,49 @@
         bookRef.update("author", author);
     }
 
+    public void BorrowerHomepageBookAddSnapShotListener(final BorrowerHomepage borrowerHomepage, final String username){
+        db.collection("books")
+                .whereEqualTo("borrower", username)
+                .addSnapshotListener(new EventListener<QuerySnapshot>() {
+                    @Override
+                    public void onEvent(@Nullable QuerySnapshot value, @Nullable FirebaseFirestoreException error) {
+                        List<DocumentSnapshot> documents = value.getDocuments();
+                        ArrayList<Book> books = new ArrayList<>();
+                        for (int i = 0; i < documents.size(); i++){
+                            Book temp = documents.get(i).toObject(Book.class);
+                            books.add(temp);
+                        }
+                        borrowerHomepage.setBorrowedBooks(books);
+                        borrowerHomepage.updateAllBooks();
+
+                    }
+                });
+        db.collection("requests").get().addOnCompleteListener(new OnCompleteListener<QuerySnapshot>() {
+            @Override
+            public void onComplete(@NonNull Task<QuerySnapshot> task) {
+                if (task.isSuccessful()){
+                    QuerySnapshot snapshot = task.getResult();
+                    List<DocumentSnapshot> documents = snapshot.getDocuments();
+                    ArrayList<Book> requestedBooks = new ArrayList<>();
+                    ArrayList<Book> acceptedBooks = new ArrayList<>();
+                    for (int i = 0; i < documents.size(); i++){
+                        BookRequest request = documents.get(i).toObject(BookRequest.class);
+                        ArrayList<String> requester = request.getRequester();
+                        if (request.getStatus().equals("pending") && requester.contains(username)){
+                            requestedBooks.add(request.getBook());
+                            System.out.println("pending "+request.getBook().getTitle() );
+                        }else if (request.getStatus().equals("accepted") && requester.contains(username)){
+                            acceptedBooks.add(request.getBook());
+                            System.out.println("accepted "+ request.getBook().getTitle());
+                        }
+                    }
+                    borrowerHomepage.setRequestedBooks(requestedBooks);
+                    borrowerHomepage.setAcceptedBooks(acceptedBooks);
+                    borrowerHomepage.updateAllBooks();
+                }
+            }
+        });
+
+    }
+
 }
